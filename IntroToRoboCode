import socket
import struct
import matplotlib.pyplot as plt
import matplotlib.animation as anima

HOST = '0.0.0.0'  # Accept connections from any interface
PORT = 12345  # Match this with Arduino

# Initialize data holders
objectX_data = []
objectY_data = []
carX_data = []
carY_data = []

# Initialize a plot
fig, axs = plt.subplots()
graphObject, = axs.plot([], [], color='g', label='Object')  # note the comma
graphCar, = axs.plot([], [], color='b', label='Car')
axs.set_xlim(-800, 800)
axs.set_ylim(-800, 800)
axs.set_xlabel('x')
axs.set_ylabel('y')
axs.set_title('Real-Time Robot Position')
axs.legend()

# Function to update the graph
def update_plot(frame):
    if objectX_data and objectY_data and carX_data and carY_data:
        graphObject.set_data(objectX_data, objectY_data)
        graphCar.set_data(carX_data, carY_data)
    return graphObject, graphCar

# Start the animation
ani = anima.FuncAnimation(fig, update_plot, interval=200)

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.bind((HOST, PORT))
    s.listen()
    print(f"[SERVER] Listening on port {PORT}...")

    conn, addr = s.accept()
    print(f"[SERVER] Connection from {addr}")

    with conn:
        try:
            plt.ion()
            plt.show()
            
            while True:
                data = conn.recv(16)  # 4 floats = 16 bytes
                if not data:
                    break

                a, b, c, d = struct.unpack('<ffff', data)

                objectX_data.append(round(a, 5))
                objectY_data.append(round(b, 5))
                carX_data.append(round(c, 5))
                carY_data.append(round(d, 5))

                conn.sendall(b"Hello from Python server!\n")
                plt.pause(0.01)

        # Save video after disconnect
        finally:
            ani.save("robot_position.mp4", writer="ffmpeg", fps=5)
            print("[SERVER] Animation saved to robot_position.mp4")
            plt.close(fig)
